package com.yzx.yzxlocalstore.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yzx.yzxlocalstore.entity.GoodsInfoToConverte;
import com.yzx.yzxlocalstore.entity.User;
import com.yzx.yzxlocalstore.entity.UserToConverte;
import java.util.List;

import com.yzx.yzxlocalstore.entity.OrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_INFO".
*/
public class OrderInfoDao extends AbstractDao<OrderInfo, Void> {

    public static final String TABLENAME = "ORDER_INFO";

    /**
     * Properties of entity OrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", false, "ORDER_ID");
        public final static Property GoodsInfos = new Property(1, String.class, "goodsInfos", false, "GOODS_INFOS");
        public final static Property GoodTotalNum = new Property(2, double.class, "goodTotalNum", false, "GOOD_TOTAL_NUM");
        public final static Property TotalMoney = new Property(3, double.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property FreeMoney = new Property(4, double.class, "freeMoney", false, "FREE_MONEY");
        public final static Property OrderWeight = new Property(5, double.class, "orderWeight", false, "ORDER_WEIGHT");
        public final static Property OrderCreatTime = new Property(6, String.class, "orderCreatTime", false, "ORDER_CREAT_TIME");
        public final static Property OrderStatus = new Property(7, int.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property OrderPaySatus = new Property(8, int.class, "orderPaySatus", false, "ORDER_PAY_SATUS");
        public final static Property OrderCreatPerson = new Property(9, String.class, "orderCreatPerson", false, "ORDER_CREAT_PERSON");
        public final static Property OrderCompleteTime = new Property(10, String.class, "orderCompleteTime", false, "ORDER_COMPLETE_TIME");
        public final static Property OrderPayType = new Property(11, int.class, "orderPayType", false, "ORDER_PAY_TYPE");
        public final static Property OrderProfit = new Property(12, double.class, "orderProfit", false, "ORDER_PROFIT");
        public final static Property IsSelect = new Property(13, boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property OrderType = new Property(14, int.class, "orderType", false, "ORDER_TYPE");
    }

    private final GoodsInfoToConverte goodsInfosConverter = new GoodsInfoToConverte();
    private final UserToConverte orderCreatPersonConverter = new UserToConverte();

    public OrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public OrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_INFO\" (" + //
                "\"ORDER_ID\" TEXT," + // 0: orderId
                "\"GOODS_INFOS\" TEXT," + // 1: goodsInfos
                "\"GOOD_TOTAL_NUM\" REAL NOT NULL ," + // 2: goodTotalNum
                "\"TOTAL_MONEY\" REAL NOT NULL ," + // 3: totalMoney
                "\"FREE_MONEY\" REAL NOT NULL ," + // 4: freeMoney
                "\"ORDER_WEIGHT\" REAL NOT NULL ," + // 5: orderWeight
                "\"ORDER_CREAT_TIME\" TEXT," + // 6: orderCreatTime
                "\"ORDER_STATUS\" INTEGER NOT NULL ," + // 7: orderStatus
                "\"ORDER_PAY_SATUS\" INTEGER NOT NULL ," + // 8: orderPaySatus
                "\"ORDER_CREAT_PERSON\" TEXT," + // 9: orderCreatPerson
                "\"ORDER_COMPLETE_TIME\" TEXT," + // 10: orderCompleteTime
                "\"ORDER_PAY_TYPE\" INTEGER NOT NULL ," + // 11: orderPayType
                "\"ORDER_PROFIT\" REAL NOT NULL ," + // 12: orderProfit
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 13: isSelect
                "\"ORDER_TYPE\" INTEGER NOT NULL );"); // 14: orderType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderInfo entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        List goodsInfos = entity.getGoodsInfos();
        if (goodsInfos != null) {
            stmt.bindString(2, goodsInfosConverter.convertToDatabaseValue(goodsInfos));
        }
        stmt.bindDouble(3, entity.getGoodTotalNum());
        stmt.bindDouble(4, entity.getTotalMoney());
        stmt.bindDouble(5, entity.getFreeMoney());
        stmt.bindDouble(6, entity.getOrderWeight());
 
        String orderCreatTime = entity.getOrderCreatTime();
        if (orderCreatTime != null) {
            stmt.bindString(7, orderCreatTime);
        }
        stmt.bindLong(8, entity.getOrderStatus());
        stmt.bindLong(9, entity.getOrderPaySatus());
 
        User orderCreatPerson = entity.getOrderCreatPerson();
        if (orderCreatPerson != null) {
            stmt.bindString(10, orderCreatPersonConverter.convertToDatabaseValue(orderCreatPerson));
        }
 
        String orderCompleteTime = entity.getOrderCompleteTime();
        if (orderCompleteTime != null) {
            stmt.bindString(11, orderCompleteTime);
        }
        stmt.bindLong(12, entity.getOrderPayType());
        stmt.bindDouble(13, entity.getOrderProfit());
        stmt.bindLong(14, entity.getIsSelect() ? 1L: 0L);
        stmt.bindLong(15, entity.getOrderType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderInfo entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        List goodsInfos = entity.getGoodsInfos();
        if (goodsInfos != null) {
            stmt.bindString(2, goodsInfosConverter.convertToDatabaseValue(goodsInfos));
        }
        stmt.bindDouble(3, entity.getGoodTotalNum());
        stmt.bindDouble(4, entity.getTotalMoney());
        stmt.bindDouble(5, entity.getFreeMoney());
        stmt.bindDouble(6, entity.getOrderWeight());
 
        String orderCreatTime = entity.getOrderCreatTime();
        if (orderCreatTime != null) {
            stmt.bindString(7, orderCreatTime);
        }
        stmt.bindLong(8, entity.getOrderStatus());
        stmt.bindLong(9, entity.getOrderPaySatus());
 
        User orderCreatPerson = entity.getOrderCreatPerson();
        if (orderCreatPerson != null) {
            stmt.bindString(10, orderCreatPersonConverter.convertToDatabaseValue(orderCreatPerson));
        }
 
        String orderCompleteTime = entity.getOrderCompleteTime();
        if (orderCompleteTime != null) {
            stmt.bindString(11, orderCompleteTime);
        }
        stmt.bindLong(12, entity.getOrderPayType());
        stmt.bindDouble(13, entity.getOrderProfit());
        stmt.bindLong(14, entity.getIsSelect() ? 1L: 0L);
        stmt.bindLong(15, entity.getOrderType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OrderInfo readEntity(Cursor cursor, int offset) {
        OrderInfo entity = new OrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : goodsInfosConverter.convertToEntityProperty(cursor.getString(offset + 1)), // goodsInfos
            cursor.getDouble(offset + 2), // goodTotalNum
            cursor.getDouble(offset + 3), // totalMoney
            cursor.getDouble(offset + 4), // freeMoney
            cursor.getDouble(offset + 5), // orderWeight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderCreatTime
            cursor.getInt(offset + 7), // orderStatus
            cursor.getInt(offset + 8), // orderPaySatus
            cursor.isNull(offset + 9) ? null : orderCreatPersonConverter.convertToEntityProperty(cursor.getString(offset + 9)), // orderCreatPerson
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orderCompleteTime
            cursor.getInt(offset + 11), // orderPayType
            cursor.getDouble(offset + 12), // orderProfit
            cursor.getShort(offset + 13) != 0, // isSelect
            cursor.getInt(offset + 14) // orderType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderInfo entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodsInfos(cursor.isNull(offset + 1) ? null : goodsInfosConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setGoodTotalNum(cursor.getDouble(offset + 2));
        entity.setTotalMoney(cursor.getDouble(offset + 3));
        entity.setFreeMoney(cursor.getDouble(offset + 4));
        entity.setOrderWeight(cursor.getDouble(offset + 5));
        entity.setOrderCreatTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderStatus(cursor.getInt(offset + 7));
        entity.setOrderPaySatus(cursor.getInt(offset + 8));
        entity.setOrderCreatPerson(cursor.isNull(offset + 9) ? null : orderCreatPersonConverter.convertToEntityProperty(cursor.getString(offset + 9)));
        entity.setOrderCompleteTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrderPayType(cursor.getInt(offset + 11));
        entity.setOrderProfit(cursor.getDouble(offset + 12));
        entity.setIsSelect(cursor.getShort(offset + 13) != 0);
        entity.setOrderType(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OrderInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OrderInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(OrderInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
