package com.yzx.yzxlocalstore.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.yzx.yzxlocalstore.entity.TypeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TYPE_BEAN".
*/
public class TypeBeanDao extends AbstractDao<TypeBean, Long> {

    public static final String TABLENAME = "TYPE_BEAN";

    /**
     * Properties of entity TypeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TypeId = new Property(0, Long.class, "typeId", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ChannelTag = new Property(3, String.class, "channelTag", false, "CHANNEL_TAG");
        public final static Property TypeCode = new Property(4, int.class, "typeCode", false, "TYPE_CODE");
    }

    private Query<TypeBean> user_TypeBeanListQuery;

    public TypeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TypeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TYPE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: typeId
                "\"ID\" INTEGER," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"CHANNEL_TAG\" TEXT," + // 3: channelTag
                "\"TYPE_CODE\" INTEGER NOT NULL );"); // 4: typeCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TYPE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TypeBean entity) {
        stmt.clearBindings();
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(1, typeId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String channelTag = entity.getChannelTag();
        if (channelTag != null) {
            stmt.bindString(4, channelTag);
        }
        stmt.bindLong(5, entity.getTypeCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TypeBean entity) {
        stmt.clearBindings();
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(1, typeId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String channelTag = entity.getChannelTag();
        if (channelTag != null) {
            stmt.bindString(4, channelTag);
        }
        stmt.bindLong(5, entity.getTypeCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TypeBean readEntity(Cursor cursor, int offset) {
        TypeBean entity = new TypeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // typeId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // channelTag
            cursor.getInt(offset + 4) // typeCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TypeBean entity, int offset) {
        entity.setTypeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChannelTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeCode(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TypeBean entity, long rowId) {
        entity.setTypeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TypeBean entity) {
        if(entity != null) {
            return entity.getTypeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TypeBean entity) {
        return entity.getTypeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "typeBeanList" to-many relationship of User. */
    public List<TypeBean> _queryUser_TypeBeanList(Long id) {
        synchronized (this) {
            if (user_TypeBeanListQuery == null) {
                QueryBuilder<TypeBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                user_TypeBeanListQuery = queryBuilder.build();
            }
        }
        Query<TypeBean> query = user_TypeBeanListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
